{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAQMA,EACA,mCADAA,EAEC,2CAoEQC,MAjEf,WAAgB,IAAD,EACaC,mBAAU,IADvB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAU,IAF3B,mBAENG,EAFM,KAEGC,EAFH,KA6Bb,OACE,qBAAKC,UACqB,oBAAhBF,EAAQG,MACZH,EAAQG,KAAKC,KAAO,GACpB,WAEC,MALP,SAME,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACAG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WAxCO,SAAAC,GACE,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WAoCY,oBAAflB,EAAQG,KACjB,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,WACvD,qBAAKrB,UAAU,OAAf,SAnCU,SAACsB,GACnB,IAIIC,EAFO,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAEzDD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAU,UAAU,QAAQ,QAAQ,MAAM,OACxD,OAAO,SAAS,YAAY,UAAU,WAAW,YAK9BL,EAAEM,YACjBC,EAAOP,EAAEQ,cACb,MAAM,GAAN,OAAUP,EAAV,aAAkBI,EAAlB,YAA2BF,EAA3B,aAAoCI,GA0BLE,CAAY,IAAIC,WAEzC,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAsD,EAA/BiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAAS,EAAG,GAA3D,YACA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGqC,oBAG5C,GACL,qBAAKnC,UAAU,aAAf,qCC5DOoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.005903eb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './index.css';\n\n\n\n\n\n\nconst api = {\n  key:\"8282384eff4ca6b401b5ec431d82cf88\",\n  base:\"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState ('');\n  const [weather, setWeather] = useState ({});\n    \n  const search = evt => {\n    if(evt.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setWeather(result);\n        setQuery('');\n        console.log(result);\n      });\n    }\n  }\n  \n  const dateBuilder = (d) =>  {\n    let months = [\"January\",\"Febuary\",\"March\",\"April\",\"May\",\"June\",\n    \"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n    let days = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day}, ${month} ${date}, ${year}`\n  }\n\n \n  return (\n    <div className={\n      (typeof weather.main != \"undefined\") \n      ? ((weather.main.temp > 16) \n        ? 'app warm' \n         : 'app')\n         : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input \n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search...\"\n          onChange={e => setQuery(e.target.value)}\n          value={query}\n          onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main !=\"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"temp\">{Math.round(weather.main.temp)* 9/5 +32} Â°F</div>\n            <div className=\"weather\">{weather.weather[0].description}</div>\n          </div>\n        </div>\n        ) : ('')}\n        <div className=\"created-by\">Created by Linzof</div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}